// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: notifications.sql

package notifications

import (
	"context"
)

const create = `-- name: Create :exec
INSERT INTO notifications (task_id, message)
VALUES (?, ?)
`

type CreateParams struct {
	TaskID  int64
	Message string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) error {
	_, err := q.db.ExecContext(ctx, create, arg.TaskID, arg.Message)
	return err
}

const delete = `-- name: Delete :exec
DELETE FROM notifications WHERE id = ?
`

func (q *Queries) Delete(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, delete, id)
	return err
}

const deleteByTaskID = `-- name: DeleteByTaskID :exec
DELETE FROM notifications WHERE task_id = ?
`

func (q *Queries) DeleteByTaskID(ctx context.Context, taskID int64) error {
	_, err := q.db.ExecContext(ctx, deleteByTaskID, taskID)
	return err
}

const getAll = `-- name: GetAll :many
SELECT id, task_id, message, is_read, created_at FROM notifications
`

func (q *Queries) GetAll(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.Message,
			&i.IsRead,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getByID = `-- name: GetByID :one
SELECT id, task_id, message, is_read, created_at FROM notifications WHERE id = ?
`

func (q *Queries) GetByID(ctx context.Context, id int64) (Notification, error) {
	row := q.db.QueryRowContext(ctx, getByID, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.Message,
		&i.IsRead,
		&i.CreatedAt,
	)
	return i, err
}

const getByTaskID = `-- name: GetByTaskID :many
SELECT id, task_id, message, is_read, created_at FROM notifications WHERE task_id = ?
`

func (q *Queries) GetByTaskID(ctx context.Context, taskID int64) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getByTaskID, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.Message,
			&i.IsRead,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnread = `-- name: GetUnread :many
SELECT id, task_id, message, is_read, created_at FROM notifications WHERE is_read = 0
`

func (q *Queries) GetUnread(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getUnread)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.Message,
			&i.IsRead,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAsRead = `-- name: MarkAsRead :exec
UPDATE notifications SET is_read = 1 WHERE id = ?
`

func (q *Queries) MarkAsRead(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, markAsRead, id)
	return err
}
